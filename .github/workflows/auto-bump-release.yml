# File: .github/workflows/auto-bump-release.yml
# Title: Auto bump, POT generation, and release for Simplified SMTP Mail
# Description: Bumps version on "new release" commits (case-insensitive), or runs manually / on tag push. Updates plugin header, readme.txt, POT, and README changelog; then tags and releases.
# Date: 2025-08-09
# Copyright © 2025 BIT_on_Tech™ • Simplified Tech of Tomorrow • All rights reserved • bitveil.dk

name: Auto Bump, POT, Release

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      mode:
        description: 'Mode: bump (bump version) or tag (no bump, just release)'
        required: true
        default: 'bump'
      notes:
        description: 'Release notes (optional)'
        required: false
        default: ''

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Decide how we were triggered:
      # - push to main with "new release" (case-insensitive) => MODE=bump
      # - push tag v* => MODE=tag
      # - manual dispatch => MODE = input
      - name: Determine trigger mode
        id: mode
        shell: bash
        run: |
          MODE=""
          NOTES=""
          if [ "${{ github.event_name }}" = "push" ]; then
            REF="${GITHUB_REF}"
            if [[ "$REF" == refs/tags/v* ]]; then
              MODE="tag"
              NOTES="Tag-triggered release"
            elif [[ "$REF" == "refs/heads/main" ]]; then
              last_msg="$(git log -1 --pretty=%B)"
              # case-insensitive contains "new release"
              shopt -s nocasematch
              if [[ "$last_msg" == *new\ release* ]]; then
                MODE="bump"
                NOTES="$last_msg"
              else
                MODE="skip"
              fi
              shopt -u nocasematch
            fi
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            MODE="${{ inputs.mode }}"
            NOTES="${{ inputs.notes }}"
          fi

          # Fallback defaults
          if [ -z "$MODE" ]; then MODE="skip"; fi
          if [ -z "$NOTES" ]; then NOTES="Automated release"; fi

          echo "MODE=$MODE"   >> $GITHUB_ENV
          echo "NOTES<<EOF"   >> $GITHUB_ENV
          echo "$NOTES"       >> $GITHUB_ENV
          echo "EOF"          >> $GITHUB_ENV

          echo "Mode decided: $MODE"
      
      - name: Stop gracefully if not a release trigger
        if: env.MODE == 'skip'
        run: |
          echo "No 'new release' in commit message and not a tag/manual run. Exiting."
          exit 0

      # Get current version from plugin header
      - name: Read current version
        id: read_version
        run: |
          version=$(grep -E '^Version:' simplified-smtp-mail.php | head -n1 | sed -E 's/^Version:[[:space:]]*//' | tr -cd '0-9.\n' | head -n1)
          if [ -z "$version" ]; then
            echo "Could not parse Version: from simplified-smtp-mail.php"; exit 1
          fi
          echo "CURRENT_VERSION=$version" >> $GITHUB_ENV
          echo "Current version: $version"

      # Bump only when MODE=bump (commit with "new release" or manual 'bump')
      - name: Bump last numeric segment
        if: env.MODE == 'bump'
        id: bump
        shell: bash
        run: |
          version="${CURRENT_VERSION}"
          IFS='.' read -r -a parts <<< "$version"
          count=${#parts[@]}
          if [ $count -eq 0 ]; then
            echo "Version parse error"; exit 1
          fi
          if [ $count -eq 1 ]; then
            parts+=(1)
          else
            last_index=$((count-1))
            last="${parts[$last_index]}"
            if [[ "$last" =~ ^[0-9]+$ ]]; then
              parts[$last_index]=$((last+1))
            else
              parts+=("1")
            fi
          fi
          NEW_VERSION="$(IFS=.; echo "${parts[*]}")"
          SAFE_VERSION="$(echo "$NEW_VERSION" | sed -E 's/[^0-9.]+//g')"
          echo "NEW_VERSION=$SAFE_VERSION" >> $GITHUB_ENV
          echo "New version: $SAFE_VERSION"

      # When MODE=tag or manual 'tag' mode, NEW_VERSION is the tag value (without 'v')
      - name: Extract version from tag (MODE=tag)
        if: env.MODE == 'tag'
        run: |
          RAW="${GITHUB_REF#refs/tags/v}"
          SAFE="$(echo "$RAW" | sed -E 's/[^0-9.]+//g')"
          if [[ ! "$SAFE" =~ ^[0-9]+(\.[0-9]+)*$ ]]; then
            echo "Invalid tag version: $RAW"; exit 1
          fi
          echo "NEW_VERSION=$SAFE" >> $GITHUB_ENV
          echo "Using tagged version: $SAFE"

      # When manual dispatch with mode=bump but you want to specify a different start,
      # you could add an optional input to override CURRENT_VERSION (not included here to keep it simple).

      - name: Update plugin header & readme.txt
        run: |
          sed -i -E "s/^Version:[[:space:]]*[0-9.]+/Version: $NEW_VERSION/" simplified-smtp-mail.php
          sed -i -E "s/^Stable tag:[[:space:]]*[0-9.]+/Stable tag: $NEW_VERSION/" readme.txt

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'

      - name: Install WP-CLI
        run: |
          curl -s -L -o wp-cli.phar https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
          chmod +x wp-cli.phar
          sudo mv wp-cli.phar /usr/local/bin/wp

      - name: Generate/Update POT file
        run: |
          mkdir -p languages
          wp i18n make-pot . languages/simplified-smtp-mail.pot --exclude=tests,node_modules,vendor

      - name: Update README.md changelog (insert at top)
        run: |
          summary="${NOTES}"
          version="${NEW_VERSION}"
          date=$(date +"%Y-%m-%d")
          entry="#### ${version} (${date})\n- ${summary}\n\n"
          if grep -q '^### 📝 Changelog' README.md; then
            awk -v insert="$entry" '/^### 📝 Changelog/{print;print insert;next}1' README.md > tmp && mv tmp README.md
          else
            printf "\n### 📝 Changelog\n%s" "$entry" >> README.md
          fi

      - name: Commit changes (header/readme/pot/README)
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add simplified-smtp-mail.php readme.txt README.md languages/simplified-smtp-mail.pot
          git commit -m "Auto sync to $NEW_VERSION: ${NOTES} [skip ci]" || echo "No changes to commit"
          git push origin HEAD:main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Create tag if this is a bump or manual bump; if the event was a tag push, reuse that tag
      - name: Tag & push
        run: |
          TAG="v${NEW_VERSION}"
          if [[ ! "$TAG" =~ ^v[0-9]+(\.[0-9]+)*$ ]]; then
            echo "Invalid tag name computed: $TAG"; exit 1
          fi

          # If event was a tag push, the tag already exists; otherwise, create it
          if [[ "${{ github.event_name }}" = "push" && "${GITHUB_REF}" == refs/tags/v* ]]; then
            echo "Tag already exists from push: ${GITHUB_REF}"
          else
            git tag "$TAG" || echo "Tag may already exist"
            git push origin "$TAG"
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.NEW_VERSION }}
          name: Simplified SMTP Mail v${{ env.NEW_VERSION }}
          body: |
            ${{ env.NOTES }}
          draft: false
          prerelease: false
          files: |
            simplified-smtp-mail.php
            readme.txt
            README.md
            languages/simplified-smtp-mail.pot
